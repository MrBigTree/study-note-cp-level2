# Linux Note

Intro

- Author: Yunyi Li
- This is to take notes for Level2 Linux course and practice VIM and markdown.

## 2 Basic Command

Shortcut

- ctrl Alt T: Open Terminal

Manual of a utility: man

- Navigate in the document:

  - B for back
  - SpaceBar for next,
  - q for quit

    1.1 Change directory: cd

- Pwd
- cd /Year/Month/Day: this is not gone work coz "/" means the root directory, it doesn't contain a folder named "Year"
- go back to main menu: cd ~ or cd
  - ~ mains the regular user's home directory, for example /home/li000795
- go one directory higher: cd ..
- Go to a absolute directory:
  - cd ~/Year/Month
  - cd /home/li000795/Year/Month
- Go to a relative directory
  - cd ../home/li000795/etc
  - cd ../../home/
- Press tab button to auto fill the directory name

  1.2 List files: ls

- ls -l: long version
- ls -a: all files
- ls -la: long details and all files
- ls -r: reverse order
- ls -t: ordered by time, newest/latest at the top

2. Make Directory mkdir

- Create a directory when parent directory is exist => mkdir Year/Month/Day
- create parent and child directories => mkdir -p Year/Month/Day

3. Create a file: touch

- touch -t

  4.1 Remove Directory: rmdir

- cannot remove a directory if it is not empty
- 3 ways to remove a branch. - rmdir -p Year/Month/Day - rmdir Year/Month/Day , rmdir Year/Month, rmdir Year - rmdir Year/Month/Day Year/Month Year - rmdir -p Year, won't work, since there is file or directory under "Year"

  4.2 Remove Directory and Files: rm

- rm -r year, rm -r is will remove dir recursively (remove all files and directories under the directory)
- rm -i: prompt before every removal - rm -f: Remove file forcelly, without confirmation

5. Copying
   copy: cp

- -v show copy information
- -u only copy update

6. Renaming and moving files

- mv oldfilename newfilename
- mv source/folder/file ~/home/li000795/new/folder

7. hidden files

- ls -la to see all hiden files

8. Absolute and relative Path

- ../
- /home/li000795/myFolder

9. Concatenating files

- cat /etc/passwd
- cat /etc/passwd /etc/fstab

Viewing output
cat
- more or less: view with scrolling features
- cat:
- echo:

10. Displaying a dir structure
    tree structure

- tree -L 4 ~: get the directory tree structure, L means level, 4 means 4 levels,
- tree -L 2 ~

11. Redirecting Output

- redirect standard Error 2>
  - ls -l 2> error.log
  - pwd 2>> error.log
- redirect standard output
  - append to existing or create new file if not exist >>
  - create a new if not exist or replace existing content >

12. Querying the Commands

- whatis: a brief explanation of Linux commands from the man pages.
- which: looks for executable files, and shows the file’s location
- whereis: looks for the filename and displays it. It will also search for the commands source code and its manual pages.

13. Command History

- history: see command history
- !!: re-run last commamnd
- !n
- !-n
- history -c : remove history

15. Pipe: |

- ls -lrt | tail -l
- output as a input of 2nd utility

Debug

- Echo $? : if you get a number not equal to zero, means error
- stop the running command: Ctrl C

Exit terminal session: exit

- exit this is not same as shutdown the guest operating system

Shutdown Guest Operating System

- shutdown -h now?
- shutdown -h +20 (shutdown after 20 minutes)

Viewing output

- more or less: view with scrolling features
- cat:
- echo:

## 3 File Permission

minimal permission when doing something

- Copy a file: X for source dir, WX for target dir, R for the file
- Delete a file: WX for dir, no require for the file
- Move a file: WX for both source and target dir, no require for the file
- Run a shell: RX for the file
- Run a binary: X for the file
- See content of a dir: R for the dir
- Without R and X permission on a directory
  - a user cannot cd to a directory.
  - a user can ls to the directory and get a partial file listing.
  - The command ls -l will not show the permission of the file nor its size and ownership.
  - The find utility will list the file.
  - The tree utility will not show the directory.
  - Ubuntu shows the directory with a different color scheme.

Umask

- A mask can be defined as Selective permeability.
- To display the umask in symbolic mode type umask -S

umask vs chmod

- umask: change permission for future dir and files
- chmod: change permission for existing dir and files

chmod

- chmod [ugoa][+-=][rwx] [object]
- who: user/owner, group, others, all
  - Owner, creator of the file
  - Group, a group of users. A group user can own a file and can assign access permission.
    - Others, all other users who are usually with a guest account. They do not belong to a group and are assigned a login and password to perform minimal tasks on the system.
- operators: +, = (set explicitily and remove all others), -
- permission: r(read), w(write), x(execute)

- The time the file was last modified.
- The time the file was last accessed. ls -ul

## 4 File System

cat vs echo?

$PATH: environment variable

- echo $PATH will see all the dir of your $PATH variable,
- you can put shell file under these folders, and input the shell file name in command line to run it (not need to specify the dir of that shell).

Root of the directory

- etc: host-specific system and its application configuration files; etc/shells has a list of shells available
- bin: contains executable files required for the system and its users
- sbin: system binary files
- dev: device files that represent physical devices on the system
- home: user home dir
- lib: essential shared libary
- tmp: temporary files/bin contains executable files required for the system and its users,
- var: variable files
- root: home dir for root user
- usr: multi user utilities and applications
- mnt: mount point for temp mount filesystems

Link

- a hard link can not created for a dir

File systems for different device

- iso9660: CD-ROM
- cifs: MSFT, remote, sharing file and other devices on a network;
- cfs: remote
- ntfs: MSFT, local, the default file system used by Windows operating systems, starting with Windows NT.

fstab: a lookup table; mount refer it to mount filesystems

free: the utility to display the amount of free space and the amount of memory used by the system

UUID: a hex 128 value that uniquely identifies an object on the internet

mounting and / root dir

- always mount devices and filesystems one level below the root dir
- don't mount in /, system will crush
- root / is mounted automatically during boot up
- you can't mount two filesystems at the same mount point

## 5 User Management

Verify the current status / newly created accounts
- tail /etc/passwd
- check a specific account "chinua"
  - grep chinua /etc/passwd

View the /etc/shadow file, has expiry date info
- sudo tail /etc/shadow

list the contents of the home directory, observe the owner and group.
- ls -l /home

### User Creation
Add a user 
- sudo useradd alex -m -d /home/alex -e 2030-12-31 -s /bin/bash
  - -m create the home directory
  - -d to set directory
  - -e expiry date
  - -s If you do not specify this option, Ubuntu’s will use the default login shell /bin/sh
  - If no group is specified in the command, the user's primary group will be the same as the username by default.user
  - The users pw shell is stored in the /etc/passwd file.

### create group and create user with group names 
Create a group: addgroup
- sudo addgroup archery 
Delete a group: groupdel


- !user's primary group will also be one of the default group; other word, one default group will be the same as the primary group.

Add a user and not specify group 
- If no group is specified in the command, the user's primary and default group will be the same as the username. 

Add a user without creating a default group using -N
- -N means primary group will be "users", one of the default group will be "users"
- sudo useradd buena -m -d /home/buena -e 2030-12-31 -s /bin/bash -N  

Add a user buena and associate her with certain groups.
  - -G specify groups
  - sudo useradd buena -m -d /home/buena -e 2030-12-31 -s /bin/bash -N -G sudo,badminton,chess
  - The primary group will be "users", and the default groups will be "users, sudo, badminton, chess"

### change user's id and group

The administrator wants to change the full name for userid jody0657 to Jody Wilson .
- sudo usermod -c "Jody Wilson" jody0657

Change user (one to many) DEFAULT groups (archery, sudo and cdrom) using
- sudo usermod -G archery,sudo,cdrom ariana
- Note: Do not put a space between the group names.
- It will change the preset default groups except the group has the same name of Primary group 

Change user's PRIMARY group
- sudo usermod -g cdrom username
  
Temporarily changing a users PRIMARY group
- newgrp groupname

### Display the user's primary and default groups
Displaying the DEFAULT group associations for a user account
- groups (when you are the user)
- groups boshu

Check the id, primary group and default/supplementory group of a user account 
- id username
  - primary group will be listed after the text "gid=" 
  - default/supplementory group will be listed after the text "groups=".


### user modification
Expirty Date
- Change the Account Expiry Date for a User 
  - method 1: sudo chage -E 2031-12-31 chris
  - method 2: sudo usermod -e 2031-12-31 chris
    - -e is also used in useradd 
- Check the expiry date of user chris
  - sudo tail /etc/shadow | grep 

Adding Comments to a User 
- sudo usermod -c "Chinua Achebe, Nigeria" chinua

Deleting a Users Account dimona
- userdel -r dimona

Adding a password
- sudo passwd ariana  
- sudo passwd boshu: 19900416

### Users Switch
- Login in another user
  - su - boshu
- check your role
  - whoami
- Exit so you return as a regular user
  - exit


## 6 Shell Script

1. Consideration when writing shell
- bash is positional, so end of an expression or evaluation must be terminated by a semicolon or a new line
  - option 1. if [ $balance -eq 0 ]; then
  - option 2. if [ $balance -eq 0 ]
  - then
- space after square brack

- if the shell file is not in $PATH, type: ./simple.sh to run simple.shPA
- put script in a $PATH so just type the file name will run it


echo

- echo "Which is the best college in Ontario?"
- echo $(date)
- echo "Today is :" + $( date +"%A" ) > DayOfWeek
- echo b\*.sh: list all filenames that begin with b and end in .sh.
- echo "$(ls -l log.03052015 | cut -d" " -f4)": -d is the delimiter and -f4 means the 4th field 
read

- echo "Enter your test 1 grade:"; read test1Grade
- read -p "Enter your test 1 grade:" test1Grade
- echo $test1Grade

Interpreting Backslash with -e

- Using the -e option in echo.
- echo -e "\n": get a new line
- echo -e "\a":

Suppress the trailing newline with -n

- echo "This month is :" $( date +"%B" )
- echo -n "This month is :" $( date +"%B" )

Get User Input with read

- echo "What month is this?"; read this_month
- echo $this_month

the -p option: automatic variable called REPLY

- read -p "What month is this?"
- echo $REPLY

the -s option: silent option to enter text that is not displayed

Arithmetic Evaluation
- Themost robust and compact syntax uses double parenthesis.
  - (( TotIncome = DivIncome + Income ))
  - (( TotalDeduction = TaxPaid + RRSP ))
  - (( Age = 35 ))
  - c=$(( a + b )) Note: spaces are not allowed before and after the assignment operator.
  - (( c = $((a + b)) )), Note: spaces allowed, redundant syntax, but can be used for a lengthy evaluation. Verify the variable c, by echo $c
- The line (( g = 0 )) is correct, it is an arithmetic evaluation, variables do not need to be preceded by a $ sign. The $ sign is optional in an arithmetic evaluation.

Using Quotation
- $()
  - command evaluation, e.g. $(pwd)
  - command substitution (save result of a command to a variable), e.g. today=$( date )
- $((expression)): $ with double brackets. Arithmetic expansion is a way to perform mathematical operations in Bash. The expression inside the double parentheses is evaluated and replaced with the result of the mathematical operation
- "": double quote 
  - allow command expansion, e.g. echo "$(pwd)"
  - allow variable expansion, e.g. echo "$a"
  - allow arithmetic expansion, e.g. echo "$(( 1 + 2 ))" 
- '': single quote: prevent expansion, will literally print what inside, except another pair of single quote inside
- backquote ``: command substitution, e.g. today=`date`

Using Quotation and $(), (())Examples
- echo pwd: This will simply print the string "pwd" on the terminal. It does not execute the pwd command to print the current working directory.
- echo $pwd: It will print a empty string if not set pwd as a environment variable. This will print the value of the environment variable $pwd if it is set.
- echo "$((pwd))": This will attempt to perform arithmetic evaluation on the string "pwd", but since "pwd" is not a numeric value, it will produce an error.
- echo '$(pwd)': This will print the literal string $(pwd) on the terminal without executing the pwd command. 
- echo $(pwd): This will execute the pwd command to print the current working directory, and then print the output on the terminal.
- echo "$(pwd)": This will execute the pwd command to print the current working directory, and then print the output on the terminal. The $() syntax is used to execute a command and capture its output.
- echo 1+1: 1+1
- echo 1 + 1: 1 + 1
- echo "1+1": 1+1
- echo '$(1+1)':$(1+1)
- echo '$((1+3))': $((1+3))

- echo ((1+1)): syntax error
- echo $(1+1): command not found

- echo "$((1+3))": 4
- echo $((1+1)): 2

- echo "$(1+1)": command not found
- echo `1+1`:command not found
- echo `$((1+1))`: 2: command not found;
built-in variables
- env: display environment variables 
- ps -u: display all running process 
- echo $$: identiy the curent process ID
- echo $PPID: identify the process ID of the parent process
- echo $PS1: display the first command line prompt.
- echo $?: This variable contains the exit status of the last executed command. The exit status is an integer value between 0 and 255 that indicates whether the command succeeded or failed. A value of 0 indicates success, while any other value indicates an error.
- echo $0: This variable contains the name of the currently running shell or script. For example, "myscript.sh".
- echo $#: This variable contains the number of arguments passed to a script or function. For example, if you run a script with the command "myscript.sh arg1 arg2 arg3", $# would contain the value "3".

Process
- Run a script in the back ground, type: myscript.sh &

## 12 Array 

1. Declaring an Array
- zero based index
- use space to seperate elements by default
- orchid=(brassavola brassia cattleya cymbidium dendrobium encyclia  laelia masdevallia miltonia odontoglossum oncidium paphiopedilum phalaenopsis)

2. access an array
- Elements of an array can be accessed using the syntax: echo ${orchid[0]}

3. length of an array and length of an element in an array
- The command echo ${#orchid[*]} will display the total number of elements in the array, i.e., 13.
-The length of 2nd element in the array is given by: echo ${#orchid[1]}


## Final Prep

### 2. Basic Linux commands
(a) home directory for root, home directory of user
(b) Absolute path, relative path
(c) Change Directory. cd .., cd ../..
(d) Rename file using mv
(e) Remove file using rm
(f) Remove non empty directory using rm
(g) Remove empty directory using rmdir
(h) Display inode number using ls -i
(i) present (current) working directory using pwd
(j) create empty file using touch, change date and time stamp using touch.
(k) parameter expansion using braces f g, example: mkdir -p flecture,labg, combined with cp, mv,
rm, touch. How many directories and files are created? Review Test question.
(l) command history $HISTSIZE, $HISTFILE, clearing history
(m) grep, cut, cat
(n) whoami, passwd, uname, su
(o) difference between cat /etc/shells, echo $SHELLS
(p) POSIX, Portable Operating System, an IEEE Standard.

### 3. File permission
(a) chmod, rwx, owner (user), group and other
(b) chown, chgrp.
(c) gpasswd, groupadd, useradd, usermod, userdel
(d) newgrp, login to new group
(e) hard links, soft links
(f) redirection,
// > >> 1> 2> &> <
stdout, stdin, stderr

(g) do not confuse between the default symbol for PS2 and redirection symbol
(h) There are four prompts PS1, PS2, PS3 and PS4. Differentiate between PS1 and PS2. PS3 and PS4 are
not covered in this course.

### 4. File System
(a) fdisk -l /dev/sdb, Review test question. Partitions, Logical drives, physical drives, extended
drives, space on disk.
(b) Logial memory, physical memory, virtual memory
(c) swap space on HDD

### 5. User Management
(a) Know the difference between /etc/shadow and /etc/passwd
(b) Which configuration files are affected when the users password is changed.
(c) Review useradd, usermod, userdel

### 6. Os concept 
(a) difference between program and process
n Linux, a program is an executable file that resides on the hard disk and contains instructions that the computer can follow to perform a task. When a program is launched, it becomes a process, which is an instance of the program running in memory. The process contains information about the program's state, such as the current instruction being executed, the values of any variables used by the program, and the program's input and output streams. Multiple processes can be running concurrently, allowing the computer to perform multiple tasks at the same time.

In summary, a program is a file containing executable code, while a process is an instance of that program running in memory, with its own state and system resources.

(b) context switching, process scheduling

(c) preemption
In Linux, preemption refers to the ability of the kernel to interrupt a running process in order to execute another process that has a higher priority.

(d) interprocess communication models. Message passing and shared memory. Which ones can be used
by processes on:
• the same computer
• different computers

(e) PPID, PID of init and its child processes. init has PID as 1

(f) init is being replaced by systemd in Linux


(g) foreground and background processes fg, bg


### 7. Shell Scripts and Functions
(a) declaring arrays, assigning variables, using arrays in scripts
(b) echo individual elements in an array
(c) starting a background process using &

(d) export
In Bash shell, the export command is used to make a variable or function available to child processes of the current shell. When a variable is exported using the export command, it becomes an environment variable, which means it can be accessed by any process or program running in the current shell session.

type: export VARIABLE_NAME=value

(e) Special Variables. $$, $?, $#?
(f) exporting variables
(g) positional parameters
(h) Functions, review scripts and class notes on Functions
(i) loops using for, while, for x in f1..11..2g, for y in f1..10..3g
(j) (( )), $(( ))
(k) case statements
(l) vim
(m) test 5 -eq 5 is the same as [ 5 -eq 5 ]


Others
- #!/bin/bash is not the same as #! /bin/bash
- to check unassigned variables before running a shell script, type: bash shellScriptFile.sh 
- no need spend too much time on VIM 

Positional Parameters
- Positional parameters
  - used to launch a process in the shell
  - 